//
//  MainVC.swift
//  Ctudy
//
//  Created by ÍπÄÏßÄÏùÄ on 2021/12/09.
//

import Foundation
import UIKit
import Alamofire
import Kingfisher
import NVActivityIndicatorView

class MainVC: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    // MARK: - Î≥ÄÏàò
    @IBOutlet var studyCollectionView: UICollectionView!
    lazy var indicatorView: UIView = {
        let indicatorView = UIView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: self.view.bounds.height))
        indicatorView.backgroundColor = UIColor.white
        return indicatorView
    }()
    lazy var indicator: NVActivityIndicatorView = {
        let indicator = NVActivityIndicatorView(frame: CGRect(x: 0, y: 0, width: 40, height: 40),
                                                type: .pacman,
                                                color: COLOR.SIGNATURE_COLOR,
                                                padding: 0)
        indicator.translatesAutoresizingMaskIntoConstraints = false
        return indicator
    }()
    lazy var loading: UILabel = {
        let label = UILabel(frame: CGRect(x: 0, y: 0, width: 20, height: 10))
        label.font = UIFont.boldSystemFont(ofSize: 15)
        label.text = "loading..."
        label.textColor = COLOR.SIGNATURE_COLOR
        label.translatesAutoresizingMaskIntoConstraints = false
       return label
    }()
    var rooms = [] as! Array<SearchRoomResponse>
    var roomId: Int?
    
    // MARK: - view load func
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.config()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
//        self.rooms.removeAll()
        super.viewDidDisappear(animated)
    }
    
    // Îã§Ïùå ÌôîÎ©¥ Ïù¥ÎèôÏ†Ñ Ï§ÄÎπÑÎèôÏûë (Î≥ÄÏàò Ïó∞Í≤∞)
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let id = segue.identifier, id == "MainDetailVC" {
            if let controller = segue.destination as? MainDetailVC {
                controller.roomId = self.roomId
            }
        }
    }
    
    fileprivate func config() {
        // Ïä§ÌÑ∞ÎîîÎ£∏ Ï°∞Ìöå
        self.getSearchRoom()
        
        // viewÏóê delegate, datasource Ïó∞Í≤∞
        self.studyCollectionView.delegate = self
        self.studyCollectionView.dataSource = self
        
        let studyroomCell = UINib(nibName: "StudyCollectionViewCell", bundle: nil)
        let emptyCell = EmptyCollectionViewCell.nib()
        
        //  ÏÖÄ Î¶¨ÏÜåÏä§ ÌååÏùº Í∞ÄÏ†∏ÏôÄÏÑú Îì±Î°ùÌïòÍ∏∞
        studyCollectionView.register(studyroomCell, forCellWithReuseIdentifier: "cell")
        studyCollectionView.register(emptyCell, forCellWithReuseIdentifier: "EmptyCollectionViewCell")
        
        studyCollectionView.showsVerticalScrollIndicator = false // scroll Ï†úÍ±∞
        studyCollectionView.clearsContextBeforeDrawing = true
    }
    
    // MARK: - indicator in api calling
    fileprivate func onStartActivityIndicator() {
        DispatchQueue.main.async {
            // Î∂àÌà¨Î™Ö Î∑∞ Ï∂îÍ∞Ä
            self.view.addSubview(self.indicatorView)
            // activity indicator Ï∂îÍ∞Ä
            self.indicatorView.addSubview(self.indicator)
            self.indicatorView.addSubview(self.loading)
            
            NSLayoutConstraint.activate([
                self.indicator.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),
                self.indicator.centerYAnchor.constraint(equalTo: self.view.centerYAnchor),
                self.loading.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),
                self.loading.centerYAnchor.constraint(equalTo: self.indicator.bottomAnchor, constant: 5)
            ])
            
            // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
            self.indicator.startAnimating()
        }
    }
    
    fileprivate func onStopActivityIndicator() {
        DispatchQueue.main.asyncAfter(deadline: .now()) {
            // Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ïÏßÄ.
            // ÏÑúÎ≤Ñ ÌÜµÏã† ÏôÑÎ£å ÌõÑ Îã§ÏùåÏùò Î©îÏÑúÎìúÎ•º Ïã§ÌñâÌï¥ÏÑú ÌÜµÏã†Ïùò ÎÅùÎÇòÎäî ÎäêÎÇåÏùÑ Ï§Ñ Ïàò ÏûàÎã§.
            self.indicator.stopAnimating()
            self.indicatorView.removeFromSuperview()
        }
    }
    
    // MARK: - search room api
    fileprivate func getSearchRoom() {
        rooms.removeAll()
        self.onStartActivityIndicator()

        AlamofireManager.shared.getSearchRoom(completion: {
            [weak self] result in
            guard let self = self else { return }
            
            self.onStopActivityIndicator()
            
            switch result {
            case .success(let roomList):
//                self.rooms = self.reloadDataWithDiff(newData: roomList, prevData: self.rooms)
                self.rooms = roomList
                self.studyCollectionView.reloadData()
//                self.studyCollectionView.reloadData()
            case .failure(let error):
                print("MainVC - getSearchRoom.failure / error: \(error.rawValue)")
            }
        })
        
        if self.indicator.isAnimating {
            self.onStopActivityIndicator()
        }
    }
    
    // MARK: - collectionView delegate
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        // ÏÖÄÏùò Í∞ØÏàò ÏßÄÏ†ï
        if rooms.count == 0 {
            return 1
        } else {
            return rooms.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if rooms.isEmpty == true {
            let cell = studyCollectionView.dequeueReusableCell(withReuseIdentifier: "EmptyCollectionViewCell", for: indexPath) as! EmptyCollectionViewCell
            cell.titleLabel.text = "ÏïÑÏßÅ ÏÜåÏÜçÎêú Ïä§ÌÑ∞ÎîîÎ£∏Ïù¥ ÏóÜÏäµÎãàÎã§.ü•≤"
            cell.subtitleLabel.text = "Ïä§ÌÑ∞ÎîîÎ£∏ÏùÄ ÏÉùÏÑ±ÌïòÍ±∞ÎÇò Ï¥àÎåÄÎ∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.\n'+'Î≤ÑÌäºÏùÑ ÌÜµÌï¥ÏÑú Ïä§ÌÑ∞ÎîîÎ£∏ÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî."
            return cell
        } else {
            let cell = studyCollectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! StudyCollectionViewCell
            cell.layer.cornerRadius = 10
            cell.roomName.text = rooms[indexPath.row].name
            cell.roomMembers.text = String(describing: rooms[indexPath.row].membercount)
            cell.roomMasterName.text = rooms[indexPath.row].mastername
    //        cell.roomImg.imageLoad(urlString: "https://api.ctudy.com\(rooms[indexPath.row].banner)", size: cell.roomImg.image!.size)
            if rooms[indexPath.row].banner != "" {
                cell.roomImg.kf.indicatorType = .activity
                cell.roomImg.kf.setImage(with: URL(string: API.IMAGE_URL + rooms[indexPath.row].banner)!)
            } else {
                cell.roomImg.image = UIImage(named: "studyroom_default.png")
            }
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        //        let cell = CGSize(width: self.studyCollectionView.layer.bounds.width, height: self.studyCollectionView.layer.bounds.height / 1.7)
        
        if rooms.isEmpty == true {
            let cell = CGSize(width: studyCollectionView.layer.bounds.width, height: studyCollectionView.layer.bounds.height)
            return cell
        } else {
            let cell = CGSize(width: studyCollectionView.layer.bounds.width, height: 260)
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print("MainVC - collectionView didSelectItemAt / selectedItem : \(rooms[indexPath.row].name) choose")
        
        if rooms.isEmpty == true {
            return
        } else {
            self.roomId = rooms[indexPath.row].id
            self.performSegue(withIdentifier: "MainDetailVC", sender: nil)
        }
    }
}

//extension UIImageView {
//    func load(url: URL, size: CGSize) {
//        DispatchQueue.global().async { [weak self] in
//            if let data = try? Data(contentsOf: url) {
//                if let image = UIImage(data: data) {
//                    DispatchQueue.main.async {
//                        self?.image = image.resize(size: size, scale: UIScreen.main.scale)
//                    }
//                }
//            } else {
//                if let data = try? Data(contentsOf: URL(string: API.IMAGE_DEFAULT_URL)!) {
//                    if let image = UIImage(data: data) {
//                        DispatchQueue.main.async {
//                            self?.image = image.resize(size: size, scale: UIScreen.main.scale)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}
